# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddItemInput {
  characterId: String!
  itemId: String!
}

type Armor implements Item {
  id: ID!
  name: String!
  description: String!
  equipable: Boolean!
  equipmentPosition: EquipmentPosition!
  armorType: ArmorType!
  category: ArmorCategory!
  physicArmor: Int!
  magicArmor: Int!
  bonusStrength: Int!
  bonusDexterity: Int!
  bonusIntelligence: Int!
  bonusVitality: Int!
}

enum ArmorCategory {
  LIGTH
  MEDIUM
  HEAVY
}

type ArmorType {
  id: ID!
  name: String!
  equipmentPosition: EquipmentPosition!
  category: ArmorCategory!
  description: String
  physicArmor: Int!
  magicArmor: Int!
  minBonusStrength: Int!
  maxBonusStrength: Int!
  minBonusDexterity: Int!
  maxBonusDexterity: Int!
  minBonusIntelligence: Int!
  maxBonusIntelligence: Int!
  minBonusVitality: Int!
  maxBonusVitality: Int!
}

type AuthResponse {
  token: String!
  message: String
}

type Character {
  id: ID!
  name: String!
  strength: Int
  dexterity: Int
  intelligence: Int
  vitality: Int
  equipment: Equipment!
  inventory: Inventory!
  race: Race!
}

type Class {
  id: ID!
  name: String!
  description: String
  weaponCategoryBonus: WeaponCategoryBonus!
  statBonus: StatisticBonus!
  insensibility: Insensibility!
  passive: Passive!
}

input CreateArmorInput {
  armorTypeId: String!
}

input CreateArmorTypeInput {
  name: String!
  category: ArmorCategory!
  equipmentPosition: EquipmentPosition!
  description: String
  physicArmor: Int!
  magicArmor: Int!
  minBonusStrength: Int!
  maxBonusStrength: Int!
  minBonusDexterity: Int!
  maxBonusDexterity: Int!
  minBonusIntelligence: Int!
  maxBonusIntelligence: Int!
  minBonusVitality: Int!
  maxBonusVitality: Int!
}

input CreateCharacterInput {
  name: String!
  raceId: String!
}

input CreateClassInput {
  name: String!
  description: String
  weaponCategoryBonus: WeaponCategoryBonusInput
  statBonus: StatisticBonusInput
  insensibility: InsensibilityInput
  passive: PassiveInput
}

input CreateRaceInput {
  name: String!
  description: String
  base_strength: Int!
  base_dexterity: Int!
  base_intelligence: Int!
  base_vitality: Int!
}

input CreateWeaponInput {
  weaponTypeId: String!
}

input CreateWeaponTypeInput {
  name: String!
  category: WeaponCategory!
  damageType: WeaponDamageType!
  equipmentPosition: EquipmentPosition!
  description: String
  minimumDamage: Int!
  maximumDamage: Int!
  minBonusStrength: Int!
  maxBonusStrength: Int!
  minBonusDexterity: Int!
  maxBonusDexterity: Int!
  minBonusIntelligence: Int!
  maxBonusIntelligence: Int!
  minBonusVitality: Int!
  maxBonusVitality: Int!
}

enum EffectType {
  MADNESS
  BLEEDING
  POISON
}

input EquipEquipmentPieceInput {
  characterId: String!
  equipmentPieceId: String!
}

type Equipment {
  id: ID!
  equipmentPieces: [Item!]!
}

enum EquipmentPosition {
  TWO_HANDED
  HAND_RIGHT
  HAND_LEFT
  HEAD
  CHEST
  SHOULDERS
  GLOVES
  GREAVES
  BOOTS
}

type Insensibility {
  effectType: EffectType
}

input InsensibilityInput {
  effectType: EffectType
}

type Inventory {
  id: ID!
  golds: Int!
  capacity: Int!
  items: [Item!]!
}

interface Item {
  id: ID!
  name: String!
  description: String!
  equipable: Boolean!
  equipmentPosition: EquipmentPosition
}

input LoginInput {
  username: String!
  password: String!
}

type Mutation {
  createCharacter(createCharacterData: CreateCharacterInput!): Character!
  updateCharacter(updateCharacterData: UpdateCharacterInput!): Character!
  addItem(addItemData: AddItemInput!): Inventory!
  createWeaponType(createWeaponTypeData: CreateWeaponTypeInput!): WeaponType!
  createWeapon(createWeaponData: CreateWeaponInput!): Weapon!
  createArmor(createArmorData: CreateArmorInput!): Armor!
  createArmorType(createArmorTypeData: CreateArmorTypeInput!): ArmorType!
  equipEquipmentPiece(equipEquipmentPieceData: EquipEquipmentPieceInput!): Equipment!
  createRace(createRaceData: CreateRaceInput!): Race!
  createClass(createClassData: CreateClassInput!): Class!
  register(registerData: RegisterInput!): AuthResponse!
}

type Passive {
  name: String
  description: String
}

input PassiveInput {
  name: String
  description: String
}

type Query {
  character(id: String!): Character!
  characters: [Character!]!
  weaponTypes: [WeaponType!]!
  weapon(id: String!): Weapon!
  weapons: [Weapon!]!
  armors: [Armor!]!
  armorTypes: [ArmorType!]!
  races: [Race!]!
  classes: [Class!]!
  class(id: String!): Class!
  login(loginData: LoginInput!): AuthResponse!
}

type Race {
  id: ID!
  name: String!
  description: String
  base_strength: Int!
  base_dexterity: Int!
  base_intelligence: Int!
  base_vitality: Int!
}

input RegisterInput {
  username: String!
  password: String!
  email: String
}

enum Statistic {
  STRENGTH
  DEXTERITY
  INTELLIGENCE
  VITALITY
}

type StatisticBonus {
  stat: Statistic
  percentageBonus: Float
}

input StatisticBonusInput {
  stat: Statistic
  percentageBonus: Float
}

input UpdateCharacterInput {
  id: String!
  name: String!
}

type User {
  id: ID!
  username: String!
  role: UserRole!
  characters: [Character!]!
}

enum UserRole {
  USER
  MJ
  ADMIN
  GOD
}

type Weapon implements Item {
  id: ID!
  name: String!
  description: String!
  equipable: Boolean!
  equipmentPosition: EquipmentPosition!
  weaponType: WeaponType!
  category: WeaponCategory!
  damageType: WeaponDamageType!
  bonusStrength: Int!
  bonusDexterity: Int!
  bonusIntelligence: Int!
  bonusVitality: Int!
}

enum WeaponCategory {
  SWORD
  AXE
  MACE
  BOW
  WAND
  STAFF
  SHIELD
}

type WeaponCategoryBonus {
  weaponCategory: WeaponCategory
  bonusDamage: Float
}

input WeaponCategoryBonusInput {
  weaponCategory: WeaponCategory
  bonusDamage: Float
}

enum WeaponDamageType {
  MELEE_PHYSICAL
  MELEE_MAGICAL
  DISTANCE_PHYSICAL
  DISTANCE_MAGICAL
}

type WeaponType {
  id: ID!
  name: String!
  equipmentPosition: EquipmentPosition!
  category: WeaponCategory!
  damageType: WeaponDamageType!
  description: String
  minimumDamage: Int!
  maximumDamage: Int!
  minBonusStrength: Int!
  maxBonusStrength: Int!
  minBonusDexterity: Int!
  maxBonusDexterity: Int!
  minBonusIntelligence: Int!
  maxBonusIntelligence: Int!
  minBonusVitality: Int!
  maxBonusVitality: Int!
}
